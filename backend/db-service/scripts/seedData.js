require('dotenv').config();
const { sequelize, testConnection } = require('../config/database');
const { Analysis } = require('../models');

// Donn√©es de d√©monstration d'analyses simplifi√©es
const demoAnalyses = [
  {
    summary: "Rapport financier d√©taill√© du quatri√®me trimestre 2023 montrant une croissance de 15% du chiffre d'affaires et une am√©lioration significative de la marge op√©rationnelle. Les investissements R&D ont √©t√© augment√©s pour pr√©parer l'avenir. L'entreprise a r√©ussi √† r√©duire ses co√ªts op√©rationnels de 8% tout en maintenant la qualit√© des services. Les perspectives pour 2024 sont encourageantes avec de nouveaux march√©s √† explorer."
  },
  {
    summary: "Contrat de partenariat strat√©gique avec TechCorp d√©finissant les modalit√©s de collaboration technologique et les conditions financi√®res sur 3 ans. Investissement initial de 2,5M‚Ç¨ avec partage des revenus 60/40. Le contrat inclut une clause d'exclusivit√© territoriale pour l'Europe de l'Ouest et des modalit√©s de collaboration technique pr√©cises. Les objectifs de croissance sont ambitieux mais r√©alisables selon l'analyse de march√©."
  },
  {
    summary: "√ânonc√© du projet Apocalipsi - Assistant intelligent de synth√®se de documents. POC √† d√©velopper en 4 jours avec m√©thodologie Scrum, utilisant Node.js, React et int√©gration API LLM. Le projet implique la gestion de 2 incidents quotidiens simul√©s et l'usage d'outils de g√©n√©ration de code IA. L'objectif est de livrer un prototype fonctionnel d√©montrant les capacit√©s d'analyse automatique de documents PDF."
  },
  {
    summary: "Analyse de march√© pour le lancement d'un nouveau produit dans le secteur des technologies vertes. L'√©tude r√©v√®le un potentiel de croissance de 200% sur les 5 prochaines ann√©es. Les concurrents principaux sont identifi√©s et leurs strat√©gies analys√©es. Les barri√®res √† l'entr√©e sont mod√©r√©es et les opportunit√©s de partenariats nombreuses. Le budget pr√©visionnel est de 5M‚Ç¨ pour la premi√®re phase."
  },
  {
    summary: "Rapport d'audit interne sur les processus de s√©curit√© informatique. Identification de 12 vuln√©rabilit√©s critiques et 28 points d'am√©lioration. Les recommandations incluent la mise √† jour des syst√®mes, la formation du personnel et l'impl√©mentation de nouvelles proc√©dures. Le co√ªt estim√© des am√©liorations est de 300K‚Ç¨ sur 18 mois avec un ROI attendu de 150% gr√¢ce √† la r√©duction des risques."
  }
];

// Fonction pour cr√©er les donn√©es de d√©mo
const seedDemoData = async () => {
  try {
    console.log('üå± Initialisation des donn√©es de d√©monstration...\n');
    console.log('üìã Type: Analyses simplifi√©es (summary uniquement)');

    // Vider la table analyses
    await Analysis.destroy({ where: {} });
    console.log('üóëÔ∏è  Table analyses vid√©e');

    // Cr√©er les analyses de d√©mo
    for (const [index, analysisData] of demoAnalyses.entries()) {
      const analysis = await Analysis.create(analysisData);
      const wordCount = analysis.getWordCount();
      console.log(`üîç Analyse ${index + 1} cr√©√©e: ${wordCount} mots (ID: ${analysis.id})`);
    }

    console.log('\n‚úÖ Donn√©es de d√©monstration cr√©√©es avec succ√®s !');
    console.log('\nüìä R√©sum√©:');
    console.log(`   ‚Ä¢ ${demoAnalyses.length} analyses cr√©√©es`);
    console.log('   ‚Ä¢ Format: Summary text uniquement');
    console.log('   ‚Ä¢ Calculs automatiques: nombre de mots, r√©sum√© court');
    
    console.log('\nüöÄ Vous pouvez maintenant tester l\'API !');
    console.log('\nüìã Tests recommand√©s:');
    console.log('   ‚Ä¢ GET http://localhost:3000/api/analyses');
    console.log('   ‚Ä¢ GET http://localhost:3000/api/analyses/stats');
    console.log('   ‚Ä¢ GET http://localhost:3000/api/analyses/search?q=POC');
    console.log('   ‚Ä¢ GET http://localhost:3000/api/analyses/search?min_words=50');
    
  } catch (error) {
    console.error('\n‚ùå Erreur lors de la cr√©ation des donn√©es de d√©mo:', error.message);
    console.error('Stack trace:', error.stack);
  }
};

// Fonction pour afficher les donn√©es existantes
const showExistingData = async () => {
  try {
    await testConnection();
    
    const analysisCount = await Analysis.count();
    console.log('\nüìä Donn√©es existantes:');
    console.log(`   ‚Ä¢ Analyses: ${analysisCount}`);
    
    if (analysisCount > 0) {
      // R√©cup√©rer quelques analyses pour les statistiques
      const analyses = await Analysis.findAll({
        attributes: ['id', 'summary', 'createdAt'],
        limit: 5,
        order: [['createdAt', 'DESC']]
      });
      
      console.log('\nüìà Statistiques:');
      const wordCounts = analyses.map(a => a.summary.split(/\s+/).length);
      const avgWords = Math.round(wordCounts.reduce((a, b) => a + b, 0) / wordCounts.length);
      console.log(`   ‚Ä¢ Nombre moyen de mots: ${avgWords}`);
      console.log(`   ‚Ä¢ Plus long: ${Math.max(...wordCounts)} mots`);
      console.log(`   ‚Ä¢ Plus court: ${Math.min(...wordCounts)} mots`);
      
      console.log('\nüìã Derni√®res analyses:');
      analyses.forEach(analysis => {
        const shortSummary = analysis.summary.substring(0, 60) + '...';
        const wordCount = analysis.summary.split(/\s+/).length;
        console.log(`   ‚Ä¢ ${shortSummary} (${wordCount} mots)`);
      });
    }
    
  } catch (error) {
    console.error('‚ùå Erreur:', error.message);
  }
};

// Fonction principale
const run = async () => {
  try {
    await testConnection();
    
    const args = process.argv.slice(2);
    
    if (args.includes('--show') || args.includes('-s')) {
      await showExistingData();
    } else if (args.includes('--help') || args.includes('-h')) {
      console.log(`
üìñ Script de donn√©es de d√©monstration (Version simplifi√©e)

Usage:
  node scripts/seedData.js [options]

Options:
  --show, -s    Afficher les donn√©es existantes
  --help, -h    Afficher cette aide

Sans option: Cr√©er les donn√©es de d√©monstration

Donn√©es cr√©√©es:
  ‚Ä¢ ${demoAnalyses.length} analyses de d√©monstration
  ‚Ä¢ Format: Summary text uniquement
  ‚Ä¢ M√©tadonn√©es calcul√©es: nombre de mots, r√©sum√© court
      `);
    } else {
      await seedDemoData();
    }
    
  } catch (error) {
    console.error('‚ùå Erreur:', error.message);
    process.exit(1);
  } finally {
    await sequelize.close();
  }
};

// Ex√©cuter si appel√© directement
if (require.main === module) {
  run();
}

module.exports = {
  seedDemoData,
  demoAnalyses
};